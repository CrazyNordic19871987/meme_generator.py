import tkinter as tk
from tkinter import messagebox, filedialog, scrolledtext
from PIL import Image, ImageDraw, ImageFont, ImageTk
import requests
import random
from datetime import datetime
import os
import threading
from io import BytesIO

class WorkingMemeGenerator:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üéØ –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤ v4.0")
        self.root.geometry("800x750")
        
        self.ollama_url = "http://localhost:11434"
        self.current_model = "llama3.1"
        self.ai_working = False
        
        # Imgflip API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –î–ê–ù–ù–´–ï
        self.imgflip_username = "CrazyNordic"  # ‚¨ÖÔ∏è –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à –ª–æ–≥–∏–Ω
        self.imgflip_password = "Amsterdam1987!"  # ‚¨ÖÔ∏è –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
        self.meme_templates = []
        
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        self.backup_templates = [
            {'id': '181913649', 'name': 'Drake', 'box_count': 2},
            {'id': '87743020', 'name': 'Two Buttons', 'box_count': 2},
            {'id': '129242436', 'name': 'Change My Mind', 'box_count': 1},
            {'id': '438680', 'name': 'Batman', 'box_count': 2},
            {'id': '188390779', 'name': 'Woman Yelling', 'box_count': 2},
            {'id': '4087833', 'name': 'Waiting Skeleton', 'box_count': 2},
            {'id': '131087935', 'name': 'Running Away Balloon', 'box_count': 2},
            {'id': '217743513', 'name': 'UNO Draw 25', 'box_count': 2},
        ]
        
        self.current_meme_path = None
        self.create_widgets()
        self.check_models()
        self.load_meme_templates()
    
    def load_meme_templates(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ–º-—à–∞–±–ª–æ–Ω—ã"""
        def load():
            try:
                self.root.after(0, lambda: self.status_var.set("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–º-—à–∞–±–ª–æ–Ω—ã..."))
                response = requests.get("https://api.imgflip.com/get_memes", timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data['success']:
                        safe_memes = [
                            m for m in data['data']['memes'] 
                            if m['box_count'] <= 3 and 
                            m['id'] in ['181913649', '87743020', '129242436', '438680', 
                                       '188390779', '4087833', '131087935', '217743513']
                        ]
                        self.meme_templates = safe_memes
                        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(safe_memes)} –º–µ–º-—à–∞–±–ª–æ–Ω–æ–≤")
                        self.root.after(0, lambda: self.templates_var.set(f"‚úÖ –®–∞–±–ª–æ–Ω–æ–≤: {len(safe_memes)}"))
                    else:
                        self.meme_templates = self.backup_templates
                        self.root.after(0, lambda: self.templates_var.set("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"))
                else:
                    self.meme_templates = self.backup_templates
                    self.root.after(0, lambda: self.templates_var.set("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"))
            except Exception as e:
                self.meme_templates = self.backup_templates
                self.root.after(0, lambda: self.templates_var.set("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã"))
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã")
        
        threading.Thread(target=load, daemon=True).start()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(self.root, text="üéØ –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤", 
                font=("Arial", 18, "bold")).pack(pady=15)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
        self.model_var = tk.StringVar(value="üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–¥–µ–ª–∏...")
        model_label = tk.Label(self.root, textvariable=self.model_var, 
                font=("Arial", 10), fg="blue")
        model_label.pack()
        
        # –ü–æ–ª–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        tk.Label(self.root, text="üìù –û–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ:", 
                font=("Arial", 12, "bold")).pack(pady=10)
        
        self.question_text = scrolledtext.ScrolledText(self.root, 
                                                     height=4, 
                                                     font=("Arial", 11),
                                                     wrap=tk.WORD)
        self.question_text.pack(fill='x', padx=25, pady=5)
        self.question_text.insert('1.0', "–Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        examples_frame = tk.Frame(self.root)
        examples_frame.pack(pady=5)
        
        examples = [
            "‚Ä¢ –Ω–µ –ø–æ–Ω–∏–º–∞—é –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è",
            "‚Ä¢ –∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ª–æ–≥–∞—Ä–∏—Ñ–º—ã –≤ –∂–∏–∑–Ω–∏?", 
            "‚Ä¢ –æ–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç–æ"
        ]
        
        for example in examples:
            tk.Label(examples_frame, text=example, font=("Arial", 9), 
                    fg="gray").pack()
        
        # –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        mode_frame = tk.Frame(self.root)
        mode_frame.pack(pady=10)
        
        self.mode_var = tk.StringVar(value="local")
        tk.Radiobutton(mode_frame, text="üåê –û–Ω–ª–∞–π–Ω-–º–µ–º—ã (Imgflip)", 
                      variable=self.mode_var, value="online",
                      font=("Arial", 10)).pack(side=tk.LEFT, padx=10)
        tk.Radiobutton(mode_frame, text="üé® –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ–º—ã", 
                      variable=self.mode_var, value="local",
                      font=("Arial", 10)).pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generate_btn = tk.Button(self.root, text="üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–º-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ", 
                                    command=self.start_generation,
                                    font=("Arial", 13, "bold"), 
                                    bg="#2196F3", fg="white",
                                    width=30, height=2)
        self.generate_btn.pack(pady=15)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.status_var = tk.StringVar(value="üí° –í–≤–µ–¥–∏ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É")
        status_label = tk.Label(self.root, textvariable=self.status_var, 
                font=("Arial", 11))
        status_label.pack()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ò–ò
        self.ai_status_var = tk.StringVar(value="")
        ai_status_label = tk.Label(self.root, textvariable=self.ai_status_var, 
                                  font=("Arial", 9), fg="green")
        ai_status_label.pack()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö
        self.templates_var = tk.StringVar(value="üìã –ó–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω—ã...")
        templates_label = tk.Label(self.root, textvariable=self.templates_var, 
                                  font=("Arial", 9), fg="purple")
        templates_label.pack()
        
        # –û–±–ª–∞—Å—Ç—å –º–µ–º–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        meme_container = tk.Frame(self.root)
        meme_container.pack(pady=20, padx=25, fill='both', expand=True)
        
        # –°–æ–∑–¥–∞–µ–º Canvas –∏ Scrollbar –¥–ª—è –º–µ–º–∞
        self.canvas = tk.Canvas(meme_container, bg='white', highlightthickness=2, highlightbackground='#2E7D32')
        self.scrollbar = tk.Scrollbar(meme_container, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg='white')
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º canvas –∏ scrollbar
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –º–µ–º–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        self.meme_label = tk.Label(self.scrollable_frame, 
                                 text="üñºÔ∏è –ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ç–≤–æ–π –º–µ–º!\n\n"
                                      "–ò–ò —Å–æ–∑–¥–∞—Å—Ç —Å–º–µ—à–Ω–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ\n–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª—é–±–æ–π —Ç–µ–º—ã",
                                 font=("Arial", 12), 
                                 bg="white", fg="#666",
                                 justify=tk.CENTER)
        self.meme_label.pack(padx=10, pady=10, fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=15)
        
        self.save_btn = tk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–º", 
                                command=self.save_meme, 
                                state="disabled",
                                font=("Arial", 11),
                                bg="#FF9800", fg="white",
                                width=15)
        self.save_btn.pack(side=tk.LEFT, padx=8)
        
        tk.Button(button_frame, text="üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ò–ò", 
                 command=self.test_ai_connection,
                 font=("Arial", 11),
                 bg="#9C27B0", fg="white",
                 width=12).pack(side=tk.LEFT, padx=8)
        
        tk.Button(button_frame, text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º", 
                 command=self.create_random_meme,
                 font=("Arial", 11),
                 bg="#4CAF50", fg="white",
                 width=12).pack(side=tk.LEFT, padx=8)
        
        tk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã", 
                 command=self.load_meme_templates,
                 font=("Arial", 11),
                 bg="#607D8B", fg="white",
                 width=15).pack(side=tk.LEFT, padx=8)
    
    def check_models(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
        def check():
            try:
                self.root.after(0, lambda: self.status_var.set("üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–æ–¥–µ–ª–∏..."))
                response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
                if response.status_code == 200:
                    models = response.json().get('models', [])
                    if models:
                        model_names = [model['name'] for model in models]
                        self.current_model = model_names[0]
                        model_text = f"‚úÖ –ú–æ–¥–µ–ª—å: {self.current_model}"
                        self.root.after(0, lambda: self.model_var.set(model_text))
                        self.root.after(0, lambda: self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"))
                        self.ai_working = True
                    else:
                        self.root.after(0, lambda: self.model_var.set("‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–µ–π"))
                        self.root.after(0, lambda: self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ (–±–µ–∑ –ò–ò)"))
                        self.ai_working = False
                else:
                    self.root.after(0, lambda: self.model_var.set("‚ùå Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"))
                    self.root.after(0, lambda: self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ (–±–µ–∑ –ò–ò)"))
                    self.ai_working = False
            except Exception as e:
                self.root.after(0, lambda: self.model_var.set("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"))
                self.root.after(0, lambda: self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ (–±–µ–∑ –ò–ò)"))
                self.ai_working = False
        
        threading.Thread(target=check, daemon=True).start()
    
    def test_ai_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–ò"""
        self.status_var.set("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ò–ò...")
        
        def test():
            try:
                test_prompt = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '—Ä–∞–±–æ—Ç–∞–µ—Ç'"
                response = requests.post(
                    f"{self.ollama_url}/api/generate",
                    json={
                        "model": self.current_model,
                        "prompt": test_prompt,
                        "stream": False
                    },
                    timeout=10
                )
                
                if response.status_code == 200:
                    result = response.json()
                    text = result.get("response", "").strip()
                    self.root.after(0, lambda: self.status_var.set(f"‚úÖ –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: {text[:20]}..."))
                    self.ai_working = True
                else:
                    self.root.after(0, lambda: self.status_var.set("‚ùå –ò–ò –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"))
                    self.ai_working = False
                    
            except Exception as e:
                self.root.after(0, lambda: self.status_var.set(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {str(e)}"))
                self.ai_working = False
        
        threading.Thread(target=test, daemon=True).start()
    
    def start_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        question = self.question_text.get('1.0', tk.END).strip()
        if not question or len(question) < 3:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "üìù –û–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ!")
            return
        
        self.generate_btn.config(state="disabled", text="‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        self.status_var.set("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")
        self.meme_label.configure(text="‚è≥ –°–æ–∑–¥–∞—é –º–µ–º...\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
        
        thread = threading.Thread(target=self.generate_meme, args=(question,))
        thread.daemon = True
        thread.start()
    
    def generate_meme(self, question):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–º"""
        try:
            meme_text = None
            
            # –ü—Ä–æ–±—É–µ–º –ò–ò –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.ai_working:
                self.root.after(0, lambda: self.ai_status_var.set("ü§ñ –ò—Å–ø–æ–ª—å–∑—É—é –ò–ò..."))
                meme_text = self.try_ai_generation(question)
            
            # –ï—Å–ª–∏ –ò–ò –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not meme_text:
                self.root.after(0, lambda: self.ai_status_var.set("‚ö° –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"))
                meme_text = self.create_smart_fallback(question)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            self.root.after(0, lambda: self.status_var.set("üé® –°–æ–∑–¥–∞—é –º–µ–º..."))
            
            if self.mode_var.get() == "online" and self.meme_templates:
                meme_path = self.create_online_meme(meme_text)
                if not meme_path:
                    self.root.after(0, lambda: self.status_var.set("üîÑ –ü—Ä–æ–±—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º..."))
                    meme_path = self.create_local_meme(meme_text)
            else:
                meme_path = self.create_local_meme(meme_text)
            
            if meme_path:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.root.after(0, lambda: self.show_result(meme_path, meme_text))
            else:
                self.root.after(0, lambda: self.show_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–º"))
            
        except Exception as e:
            self.root.after(0, lambda: self.show_error(f"–û—à–∏–±–∫–∞: {str(e)}"))
    
    def create_online_meme(self, meme_text):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–º —á–µ—Ä–µ–∑ Imgflip API"""
        try:
            if not self.meme_templates:
                return None
                
            template = random.choice(self.meme_templates)
            
            if "|" in meme_text:
                top, bottom = [part.strip() for part in meme_text.split("|", 1)]
            else:
                words = meme_text.split()
                mid = len(words) // 2
                top = ' '.join(words[:mid])
                bottom = ' '.join(words[mid:])
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            credentials_list = [
                {"username": self.imgflip_username, "password": self.imgflip_password},  # –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
                {"username": "imgflip_hub", "password": "imgflip_hub"},  # –î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç
            ]
            
            for credentials in credentials_list:
                params = {
                    'template_id': template['id'],
                    'username': credentials["username"],
                    'password': credentials["password"],
                    'text0': top[:100],
                    'text1': bottom[:100]
                }
                
                try:
                    response = requests.post("https://api.imgflip.com/caption_image", 
                                           data=params, timeout=15)
                    result = response.json()
                    
                    if result['success']:
                        image_url = result['data']['url']
                        img_response = requests.get(image_url)
                        img = Image.open(BytesIO(img_response.content))
                        
                        meme_path = f"online_meme_{datetime.now().strftime('%H%M%S')}.png"
                        img.save(meme_path, 'PNG')
                        print(f"‚úÖ –û–Ω–ª–∞–π–Ω-–º–µ–º —Å–æ–∑–¥–∞–Ω: {template['name']}")
                        return meme_path
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ Imgflip: {result.get('error_message', 'Unknown error')}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    continue
            
            print("‚ùå –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def create_local_meme(self, meme_text):
        """–°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–º"""
        try:
            if "|" in meme_text:
                top, bottom = [part.strip() for part in meme_text.split("|", 1)]
            else:
                top = meme_text
                bottom = "–°—Ç–∞–ª–æ –ø–æ–Ω—è—Ç–Ω–µ–µ? üòä"
            
            # –£–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            width, height = 600, 500
            colors = ['#FFEBEE', '#E8F5E8', '#E3F2FD', '#FFF3E0', '#F3E5F5']
            bg_color = random.choice(colors)
            
            image = Image.new('RGB', (width, height), bg_color)
            draw = ImageDraw.Draw(image)
            
            # –®—Ä–∏—Ñ—Ç—ã
            try:
                font_large = ImageFont.truetype("arial.ttf", 28)
                font_small = ImageFont.truetype("arial.ttf", 24)
            except:
                try:
                    font_large = ImageFont.truetype("arial.ttf", 28)
                    font_small = ImageFont.truetype("arial.ttf", 24)
                except:
                    font_large = ImageFont.load_default()
                    font_small = ImageFont.load_default()
            
            def draw_text_with_wrap(text, font, y_start, max_width, color='#2E7D32'):
                words = text.split()
                lines = []
                current_line = []
                
                for word in words:
                    test_line = ' '.join(current_line + [word])
                    bbox = draw.textbbox((0, 0), test_line, font=font)
                    text_width = bbox[2] - bbox[0]
                    
                    if text_width <= max_width:
                        current_line.append(word)
                    else:
                        lines.append(' '.join(current_line))
                        current_line = [word]
                
                if current_line:
                    lines.append(' '.join(current_line))
                
                for i, line in enumerate(lines):
                    bbox = draw.textbbox((0, 0), line, font=font)
                    text_width = bbox[2] - bbox[0]
                    x = (width - text_width) // 2
                    y = y_start + i * 35
                    draw.text((x, y), line, font=font, fill=color)
                
                return len(lines)
            
            # –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
            top_lines = draw_text_with_wrap(top, font_large, 80, width - 80, '#1A237E')
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            line_y = 80 + top_lines * 35 + 20
            draw.line([50, line_y, width-50, line_y], fill='#78909C', width=3)
            
            # –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
            draw_text_with_wrap(bottom, font_small, line_y + 30, width - 80, '#2E7D32')
            
            # –†–∞–º–∫–∞
            draw.rectangle([20, 20, width-20, height-20], outline='#455A64', width=4)
            
            meme_path = f"local_meme_{datetime.now().strftime('%H%M%S')}.png"
            image.save(meme_path, 'PNG')
            
            print("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –º–µ–º —Å–æ–∑–¥–∞–Ω")
            return meme_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–º–∞: {e}")
            return None
    
    def try_ai_generation(self, question):
        """–ü—Ä–æ–±—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ò–ò"""
        try:
            prompt = f"""
            –°–æ–∑–¥–∞–π —Å–º–µ—à–Ω–æ–π –º–µ–º –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–µ–º—ã: {question}
            –§–æ—Ä–º–∞—Ç: –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç | –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
            –ü—Ä–∏–º–µ—Ä: "–ö–æ–≥–¥–∞ –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è" | "a¬≤ + b¬≤ = c¬≤ - –∏ –≤—Å—ë —Å—Ö–æ–¥–∏—Ç—Å—è!"
            –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–µ—Ä—Ö | –Ω–∏–∑
            """
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.current_model,
                    "prompt": prompt,
                    "stream": False,
                    "options": {"temperature": 0.7}
                },
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                text = result.get("response", "").strip()
                print(f"üì® –û—Ç–≤–µ—Ç –ò–ò: {text}")
                
                if "|" in text:
                    for line in text.split('\n'):
                        if "|" in line:
                            return line.strip()
                elif text:
                    words = text.split()
                    if len(words) > 3:
                        mid = len(words) // 2
                        return f"{' '.join(words[:mid])} | {' '.join(words[mid:])}"
                
                return text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")
            return None
    
    def create_smart_fallback(self, question):
        """–£–º–Ω—ã–π fallback –±–µ–∑ –ò–ò"""
        question_lower = question.lower()
        
        if "–ø–∏—Ñ–∞–≥–æ—Ä" in question_lower or "—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫" in question_lower:
            templates = [
                "–ì–∏–ø–æ—Ç–µ–Ω—É–∑–∞ –∑–æ–≤—ë—Ç –≥—É–ª—è—Ç—å, –∞ –∫–∞—Ç–µ—Ç—ã —Å–ø—è—Ç | a¬≤ + b¬≤ = c¬≤ - –∏ —Ç—ã –≥–µ—Ä–æ–π!",
                "–ö–æ–≥–¥–∞ –≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–µ –≤—Å—ë –Ω–µ —Ç–∞–∫ | –ö–≤–∞–¥—Ä–∞—Ç –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã = —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∫–∞—Ç–µ—Ç–æ–≤ ‚úì",
                "–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É | –ö–∞—Ç–µ—Ç—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ —Å–ª–æ–∂–∏–ª - –∏ –≥–æ—Ç–æ–≤–æ! üéØ"
            ]
        elif "–º–∞—Ç–µ–º–∞—Ç" in question_lower:
            templates = [
                "–ú–æ–∑–≥ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á | –í–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º '–≥–µ–Ω–∏–π'... –∏–ª–∏ –Ω–µ—Ç? ü§î",
                "–¶–∏—Ñ—Ä—ã –∏ —Ñ–æ—Ä–º—É–ª—ã —Ç–∞–Ω—Ü—É—é—Ç | –ê –æ—Ç–≤–µ—Ç –±—ã–ª —Ç–∞–∫ –±–ª–∏–∑–∫–æ! üí°",
            ]
        elif "—Ñ–∏–∑–∏–∫" in question_lower:
            templates = [
                "–ó–∞–∫–æ–Ω—ã –ù—å—é—Ç–æ–Ω–∞ –≤ –∂–∏–∑–Ω–∏ | –Ø–±–ª–æ–∫–æ —É–ø–∞–ª–æ - –≥–æ–ª–æ–≤–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞! üçé",
                "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏—Ü—ã –∏ —è | –ò —Ç–∞–º –∏ —Ç—É—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª üëÄ",
            ]
        elif "—Ö–∏–º–∏" in question_lower:
            templates = [
                "–°–º–µ—à–∏–≤–∞—é –≤–µ—â–µ—Å—Ç–≤–∞ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ | –ë–£–ú! –ò–ª–∏ –Ω–µ—Ç? üß™",
                "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞ | H‚ÇÇO - –≤–æ–¥–∞, –∞ –¥–∞–ª—å—à–µ... ü§∑",
            ]
        elif "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä" in question_lower or "–∫–æ–¥" in question_lower:
            templates = [
                "–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞ | –ù–∞—à—ë–ª –±–∞–≥! –¢–µ–ø–µ—Ä—å –±—ã –ø–æ—á–∏–Ω–∏—Ç—å... üêõ",
                "–ò–∑—É—á–µ–Ω–∏–µ Python | Import understanding - —É—Å–ø–µ—à–Ω–æ! üêç",
            ]
        else:
            templates = [
                f"–†–∞–∑–±–∏—Ä–∞—é—Å—å —Å {question[:20]}... | –û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –≤—Å—ë –ª–æ–≥–∏—á–Ω–æ! üß†",
                f"–ú–æ–∑–≥ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ {question[:15]} | –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞... –∏ –≥–æ—Ç–æ–≤–æ! üîÑ",
                f"–ö–æ–≥–¥–∞ —É—á–∏—Ç–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç {question[:15]} | –ê —è —É–∂–µ –≤—Å—ë –ø–æ–Ω—è–ª! –ù–µ—Ç? üòÖ"
            ]
        
        return random.choice(templates)
    
    def create_random_meme(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º"""
        topics = ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è"]
        topic = random.choice(topics)
        self.question_text.delete('1.0', tk.END)
        self.question_text.insert('1.0', topic)
        self.start_generation()
    
    def show_result(self, meme_path, meme_text):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(meme_path)
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–≤—å—é (—É–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä)
            max_size = (550, 450)
            image.thumbnail(max_size, Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(image)
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ–º
            self.meme_label.configure(image=photo, text="")
            self.meme_label.image = photo
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.save_btn.config(state="normal")
            self.generate_btn.config(state="normal", text="üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–º-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
            self.status_var.set("‚úÖ –ú–µ–º –≥–æ—Ç–æ–≤!")
            self.ai_status_var.set("")
            
            self.current_meme_path = meme_path
            
            print(f"üéâ –ú–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω: {meme_text}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.show_error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É"""
        messagebox.showerror("–û—à–∏–±–∫–∞", message)
        self.status_var.set("‚ùå –û—à–∏–±–∫–∞")
        self.generate_btn.config(state="normal", text="üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–º-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
        self.ai_status_var.set("")
        self.meme_label.configure(image=None, text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    
    def save_meme(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–º"""
        if hasattr(self, 'current_meme_path') and self.current_meme_path:
            filename = filedialog.asksaveasfilename(
                defaultextension=".png",
                filetypes=[("PNG files", "*.png")],
                initialfile=f"–º–µ–º_{datetime.now().strftime('%H%M%S')}.png"
            )
            if filename:
                try:
                    import shutil
                    shutil.copy2(self.current_meme_path, filename)
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"üéâ –ú–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n{filename}")
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
    
    def run(self):
        self.root.mainloop()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üéØ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–µ–º–æ–≤...")
    print("üí° –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("üîß –î–ª—è –æ–Ω–ª–∞–π–Ω-–º–µ–º–æ–≤ –∑–∞–º–µ–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –∫–æ–¥–µ")
    app = WorkingMemeGenerator()
    app.run()